const CACHE_NAMES={STATIC:"static-cache-v1",FONTS:"fonts-cache-v1",PAGES:"pages-cache-v1",OFFLINE:"offline-cache-v1",CRITICAL:"critical-cache-v1"},SW_VERSION="1.0.5",OFFLINE_PAGE="/fallback/offline.html",CRITICAL_RESOURCES=["/manifest.webmanifest","/favicon.ico","/robots.txt"],CACHE_DURATION=31536e6,CHECK_INTERVAL=3e5,INSTALL_SESSION_KEY="install-session",INSTALL_PROMPT_DELAY=8e3,SESSION_DURATION=864e5;importScripts("https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"),importScripts("https://www.gstatic.com/firebasejs/10.7.1/firebase-messaging-compat.js");const firebase=self.firebase,firebaseConfig={apiKey:"AIzaSyAQP_VjdlDv915rj1_eqlq0BnJGCB1lJYw",authDomain:"zendo-aarush.firebaseapp.com",projectId:"zendo-aarush",storageBucket:"zendo-aarush.firebasestorage.app",messagingSenderId:"756455688246",appId:"1:756455688246:web:d72db4298952b3e702b097",measurementId:"G-RNN756TW7T"};firebase.initializeApp(firebaseConfig);const messaging=firebase.messaging();async function updateInstallSessionTiming(e){const t=await getInstallSession();if(!t||t.hasShownPrompt)return;if(e.hasOpenDialogs)return;const a=Date.now(),n={...t,totalTime:t.totalTime+(a-(t.lastUpdate||t.startTime)),lastUpdate:a};if(n.totalTime>=8e3){n.hasShownPrompt=!0,await setInstallSession(n);const e=await self.clients.matchAll({type:"window"}),s=t.isSafari?"SHOW_INSTALL_TOAST":"SHOW_INSTALL_PROMPT";e.forEach((e=>{e.postMessage({type:s,data:{timestamp:a}})}))}else await setInstallSession(n)}async function getInstallSession(){try{const e=await caches.open(CACHE_NAMES.STATIC),t=await e.match("install-session");if(t){return await t.json()}}catch(e){console.warn("[Service Worker] Could not retrieve install session:",e)}return null}async function setInstallSession(e){try{const t=await caches.open(CACHE_NAMES.STATIC),a=new Response(JSON.stringify(e),{headers:{"Content-Type":"application/json"}});await t.put("install-session",a)}catch(e){console.warn("[Service Worker] Could not save install session:",e)}}async function clearInstallSession(){try{const e=await caches.open(CACHE_NAMES.STATIC);await e.delete("install-session")}catch(e){console.warn("[Service Worker] Could not clear install session:",e)}}function isSafariApple(e){const t=/^((?!chrome|android).)*safari/i.test(e),a=/iPad|iPhone|iPod|Macintosh|MacIntel|MacPPC|Mac68K/.test(e);return t&&a}async function handleInstallSession(e){if(e.isInstalled||e.cookieConsentVisible)return;const t=await getInstallSession(),a=Date.now();if(t){if(a-t.startTime>864e5)await setInstallSession({startTime:a,totalTime:0,hasShownPrompt:!1,userAgent:e.userAgent,isSafari:e.isSafari,lastUpdate:a}),console.log("[Service Worker] Started new install session (expired)");else if(!t.hasShownPrompt){if(e.hasOpenDialogs)return;const n={...t,totalTime:t.totalTime+(a-(t.lastUpdate||t.startTime)),lastUpdate:a};if(n.totalTime>=8e3){n.hasShownPrompt=!0,await setInstallSession(n);const t=await self.clients.matchAll({type:"window"}),s=e.isSafari?"SHOW_INSTALL_TOAST":"SHOW_INSTALL_PROMPT";t.forEach((e=>{e.postMessage({type:s,data:{timestamp:a}})}))}else await setInstallSession(n)}}else await setInstallSession({startTime:a,totalTime:0,hasShownPrompt:!1,userAgent:e.userAgent,isSafari:e.isSafari,lastUpdate:a})}function isCriticalResource(e){return CRITICAL_RESOURCES.some((t=>e===t||e.endsWith(t)))}async function handleCriticalResource(e){try{const t=await caches.match(e);if(t)return t;const a=await fetch(e);if(a.ok)try{const t=await caches.open(CACHE_NAMES.CRITICAL),n=a.clone();await t.put(e,n)}catch(e){}return a}catch(t){const a=await caches.match(e);if(a)return a;if(e.url.includes("manifest.webmanifest"))return new Response(JSON.stringify({name:"Zendo",short_name:"Zendo",start_url:"/",display:"standalone",background_color:"#000000",theme_color:"#000000",icons:[{src:"/assets/icons/maskable-icon.png",sizes:"512x512",type:"image/png",purpose:"maskable"}]}),{headers:{"Content-Type":"application/manifest+json"},status:200});if(e.url.includes("favicon.ico")){const e=atob("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="),t=new Uint8Array(e.length);for(let a=0;a<e.length;a++)t[a]=e.charCodeAt(a);return new Response(t,{headers:{"Content-Type":"image/png"},status:200})}return new Response("Not Found",{status:404})}}async function handleNavigationRequest(e){try{return await fetch(e)}catch(e){try{const e=await caches.match(OFFLINE_PAGE);if(e)return processOfflinePage(e)}catch(e){}return new Response('<!DOCTYPE html>\n      <html>\n        <head>\n          <title>Offline</title>\n          <meta charset="utf-8">\n          <meta name="viewport" content="width=device-width, initial-scale=1">\n          <style>\n            body { \n              font-family: system-ui, sans-serif; \n              text-align: center; \n              padding: 2rem; \n              background: #f9fafb; \n            }\n            h1 { color: #111827; }\n          </style>\n        </head>\n        <body>\n          <h1>You\'re Offline</h1>\n          <p>Please check your internet connection and try again.</p>\n          <button onclick="window.location.reload()">Retry</button>\n        </body>\n      </html>',{headers:{"Content-Type":"text/html"},status:200})}}async function handleFontRequest(e){try{const t=await caches.match(e);if(t)return t;const a=new Request(e.url,{method:"GET",mode:"no-cors",credentials:"omit",cache:"default"}),n=await fetch(a);if(0===n.status||n.ok)try{const t=await caches.open(CACHE_NAMES.FONTS),a=n.clone();await t.put(e,a)}catch(e){}return n}catch(t){const a=await caches.match(e);return a||(e.url.includes("googleapis.com")&&e.url.includes("css")?new Response("/* Fallback font CSS */\n        @font-face {\n          font-family: 'Geist Sans';\n          font-style: normal;\n          font-weight: 400;\n          font-display: swap;\n          src: local('system-ui'), local('sans-serif');\n        }\n        @font-face {\n          font-family: 'Space Grotesk';\n          font-style: normal;\n          font-weight: 400;\n          font-display: swap;\n          src: local('system-ui'), local('sans-serif');\n        }",{headers:{"Content-Type":"text/css"},status:200}):new Response("Font not available offline",{status:404}))}}async function handleStaticAssetRequest(e){try{const t=await fetch(e);if(t.ok&&shouldCacheAsset(e.url))try{const a=await caches.open(CACHE_NAMES.STATIC),n=t.clone();await a.put(e,n)}catch(e){}return t}catch(t){const a=await caches.match(e);return a||new Response("Resource not available offline",{status:404,headers:{"Content-Type":"text/plain"}})}}function shouldCacheAsset(e){return[".js",".css",".png",".jpg",".jpeg",".svg",".ico",".woff",".woff2",".ttf"].some((t=>e.includes(t)))}async function processOfflinePage(e){try{const t=(await e.text()).replace("</head>","\n      <style>\n        body {\n          font-family: 'Geist Sans', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif !important;\n        }\n        \n        h1, h2, h3, h4, h5, h6 {\n          font-family: 'Space Grotesk', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif !important;\n        }\n        \n        * {\n          font-display: swap;\n        }\n      </style>\n    </head>");return new Response(t,{headers:{"Content-Type":"text/html","Cache-Control":"no-cache"},status:200})}catch(t){return e}}async function checkAndRefreshCache(){try{const e=await caches.open(CACHE_NAMES.OFFLINE);if(!await e.match(OFFLINE_PAGE))try{await e.add(OFFLINE_PAGE)}catch(e){}await cleanupExpiredCaches()}catch(e){}}async function cleanupExpiredCaches(){try{const e=Date.now(),t=await caches.keys();for(const a of t){if(!Object.values(CACHE_NAMES).includes(a))continue;const t=await caches.open(a),n=await t.keys();for(const a of n)try{const n=await t.match(a);if(n){const s=n.headers.get("date");if(s){e-new Date(s).getTime()>31536e6&&await t.delete(a)}}}catch(e){continue}}}catch(e){}}let cacheCheckInterval;function startCacheCheckInterval(){cacheCheckInterval&&clearInterval(cacheCheckInterval),cacheCheckInterval=setInterval(checkAndRefreshCache,3e5)}messaging.onBackgroundMessage((e=>{const t=e.notification?.title||"Zendo",a={body:e.notification?.body||"You have a new message",icon:"/assets/icons/maskable-icon.png",badge:"/assets/icons/maskable-icon.png",tag:e.data?.tag||"default",data:e.data,actions:e.data?.actions?JSON.parse(e.data.actions):[],requireInteraction:!0,silent:!1,vibrate:[200,100,200]};return self.registration.showNotification(t,a)})),self.addEventListener("install",(e=>{e.waitUntil(Promise.all([caches.open(CACHE_NAMES.OFFLINE).then((e=>e.add(OFFLINE_PAGE).catch((e=>{console.warn("[Service Worker] Could not cache offline page:",e)})))),caches.open(CACHE_NAMES.CRITICAL).then((e=>Promise.allSettled(CRITICAL_RESOURCES.map((t=>e.add(t).catch((e=>{console.warn(`[Service Worker] Could not cache ${t}:`,e)})))))))]).then((()=>self.skipWaiting())).catch((e=>{console.error("[Service Worker] Installation failed:",e)})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>Object.values(CACHE_NAMES).includes(e)?Promise.resolve():caches.delete(e)))))).then((()=>self.clients.claim())).catch((e=>{console.error("[Service Worker] Activation failed:",e)})))})),self.addEventListener("fetch",(e=>{const t=e.request,a=new URL(t.url);"GET"===t.method&&"chrome-extension:"!==a.protocol&&"moz-extension:"!==a.protocol&&(isCriticalResource(a.pathname)?e.respondWith(handleCriticalResource(t)):a.hostname.includes("googleapis.com")||a.hostname.includes("gstatic.com")?e.respondWith(handleFontRequest(t)):"navigate"!==t.mode?a.origin!==self.location.origin||e.respondWith(handleStaticAssetRequest(t)):e.respondWith(handleNavigationRequest(t)))})),self.addEventListener("message",(e=>{const{data:t,ports:a}=e;if(t&&"GET_VERSION"===t.type){const e=a[0];e&&e.postMessage({type:"VERSION",version:"1.0.5",cacheNames:CACHE_NAMES,timestamp:Date.now()})}else t&&"INIT_INSTALL_SESSION"===t.type?handleInstallSession(t.data):t&&"APP_INSTALLED"===t.type?clearInstallSession():"CHECK_CACHE"===t?checkAndRefreshCache():"START_CACHE_CHECK"===t?startCacheCheckInterval():t&&"UPDATE_INSTALL_SESSION"===t.type&&updateInstallSessionTiming(t.data)})),self.addEventListener("notificationclick",(e=>{e.notification.close();const t=e.action,a=e.notification.data||{};let n="/";"support"===t?n="/kofi":"explore"===t?n="/":"install-thank-you"===e.notification.tag?n="/kofi":a.url&&(n=a.url),e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(const t of e)if(t.url.includes(self.location.origin)&&"focus"in t)return"navigate"in t&&t.navigate(n),t.focus();if(clients.openWindow)return clients.openWindow(n)})))})),self.addEventListener("activate",(()=>{startCacheCheckInterval()})),checkAndRefreshCache();